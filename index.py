import os
import logging
import base64
import uuid
import json
import pathlib
import random
from datetime import datetime, timedelta, timezone
import hmac
import hashlib
from urllib.parse import parse_qsl, unquote
from typing import Optional, List, Dict, Any
from zoneinfo import ZoneInfo

import requests
from fastapi.concurrency import run_in_threadpool
import warnings
from urllib3.exceptions import InsecureRequestWarning
import httpx
import asyncio
import re
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Update, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from fastapi import FastAPI, Request, HTTPException, Query, Depends
from fastapi.responses import JSONResponse, FileResponse, Response
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi import BackgroundTasks
from dotenv import load_dotenv
from pydantic import BaseModel
from contextlib import asynccontextmanager

# --- Pydantic Models ---
class InitDataRequest(BaseModel):
    initData: str

class QuestStartRequest(BaseModel):
    initData: str
    quest_id: int

class PromocodeClaimRequest(BaseModel):
    initData: str
    quest_id: int

class CategoryCreateRequest(BaseModel):
    initData: str
    name: str

class CategoryUpdateRequest(BaseModel):
    initData: str
    category_id: int
    name: str

class CategoryDeleteRequest(BaseModel):
    initData: str
    category_id: int

class CategoryReorderRequest(BaseModel):
    initData: str
    ordered_ids: List[int]

class UserChallengesRequest(BaseModel):
    initData: str
    user_id: str

class EventEnterRequest(BaseModel):
    initData: str
    event_id: int
    tickets_to_spend: int # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –±—ã–ª–æ tickets_cost

class ParticipantsRequest(BaseModel):
    initData: str
    event_id: int

class EventParticipantsRequest(BaseModel):
    initData: str
    event_id: int

class QuestReorderRequest(BaseModel):
    initData: str
    quest_id: int
    category_id: Optional[int] = None
    direction: str

class PromocodeAdminListRequest(BaseModel):
    initData: str

class PromocodeCreateRequest(BaseModel):
    initData: str
    codes: str
    reward_value: int
    description: str

class EventClearRequest(BaseModel):
    initData: str
    event_id: int

class TradeLinkUpdateRequest(BaseModel):
    initData: str
    trade_link: str

# —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ condition_type ‚Üî –∫–æ–ª–æ–Ω–∫–∞ –∏–∑ users
CONDITION_TO_COLUMN = {
    # Twitch
    "twitch_messages_session": "daily_message_count",
    "twitch_messages_week": "weekly_message_count",
    "twitch_messages_month": "monthly_message_count",
    "twitch_uptime_session": "daily_uptime_minutes",
    "twitch_uptime_week": "weekly_uptime_minutes",
    "twitch_uptime_month": "monthly_uptime_minutes",

    # Telegram
    "telegram_messages_session": "telegram_daily_message_count",
    "telegram_messages_week": "telegram_weekly_message_count",
    "telegram_messages_month": "telegram_monthly_message_count",
}

# --- Setup ---
load_dotenv()
warnings.filterwarnings("ignore", category=InsecureRequestWarning)
logging.basicConfig(level=logging.INFO)

# --- –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
TRUSTED_BOT_TOKEN = os.getenv("TRUSTED_BOT_TOKEN")
ALL_VALID_TOKENS = [t for t in [BOT_TOKEN, TRUSTED_BOT_TOKEN] if t]

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
ALLOWED_CHAT_ID = int(os.getenv("ALLOWED_CHAT_ID", "0") or 0)
WEB_APP_URL = os.getenv("WEB_APP_URL")
ADMIN_TELEGRAM_IDS_STR = os.getenv("ADMIN_TELEGRAM_IDS", "")
ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_TELEGRAM_IDS_STR.split(',') if admin_id.strip()]
ADMIN_NOTIFY_CHAT_ID = os.getenv("ADMIN_NOTIFY_CHAT_ID")
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TWITCH_REDIRECT_URI = os.getenv("TWITCH_REDIRECT_URI")
SECRET_KEY = os.getenv("SECRET_KEY", "a_very_secret_key_that_should_be_changed") # –î–æ–±–∞–≤—å —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Vercel –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
WIZEBOT_API_KEY = os.getenv("WIZEBOT_API_KEY")

# --- Paths ---
BASE_DIR = pathlib.Path(__file__).resolve().parent
TEMPLATES_DIR = BASE_DIR / "public"

# --- FastAPI app ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    logging.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    yield
    logging.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await bot.session.close()

app = FastAPI(title="Quest Bot API")

# --- Middlewares ---
@app.middleware("http")
async def log_requests(request: Request, call_next):
    logging.info(f"üîπ Path: {request.url.path}")
    logging.info(f"üîπ Method: {request.method}")
    response = await call_next(request)
    logging.info(f"üîπ Response status: {response.status_code}")
    return response

async def process_telegram_update(update: dict, supabase: httpx.AsyncClient):
    # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º run_in_threadpool, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥
    # –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç FastAPI
    await run_in_threadpool(dp.feed_update, bot=bot, update=Update(**update), supabase=supabase)

# --- –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–û–ú (DEPENDENCY) ---
async def get_supabase_client():
    client = httpx.AsyncClient(
        base_url=f"{SUPABASE_URL}/rest/v1",
        headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"},
        timeout=30.0
    )
    try:
        yield client
    finally:
        await client.aclose()

# --- Utils ---
def encode_cookie(value: dict) -> str:
    return base64.urlsafe_b64encode(json.dumps(value).encode("utf-8")).decode("ascii")

def decode_cookie(value: str | None) -> dict | None:
    if not value: return None
    try: return json.loads(base64.urlsafe_b64decode(value.encode("ascii")).decode("utf-8"))
    except Exception: return None

def is_valid_init_data(init_data: str, valid_tokens: list[str]) -> dict | None:
    try:
        parsed_data = dict(parse_qsl(unquote(init_data)))
        if "hash" not in parsed_data: return None
        received_hash = parsed_data.pop("hash")
        data_check_string = "\n".join(f"{k}={v}" for k, v in sorted(parsed_data.items()))
        for token in valid_tokens:
            if not token: continue
            secret_key = hmac.new("WebAppData".encode(), token.encode(), hashlib.sha256).digest()
            calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
            if calculated_hash == received_hash:
                return json.loads(parsed_data.get("user", "{}"))
        logging.error("‚ùå HASH MISMATCH - initData validation FAILED.")
        return None
    except Exception:
        return None
        
def create_twitch_state(init_data: str) -> str:
    return hmac.new(SECRET_KEY.encode(), init_data.encode(), hashlib.sha256).hexdigest()

def validate_twitch_state(state: str, init_data: str) -> bool:
    expected_state = create_twitch_state(init_data)
    return hmac.compare_digest(expected_state, state)

# --- Telegram Bot/Dispatcher ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
router = Router()
dp = Dispatcher()
dp.include_router(router)

# --- Telegram handlers ---
@router.message(Command("start"))
async def cmd_start(message: types.Message, command: CommandObject, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    token = command.args or ""
    user_id = message.from_user.id
    if token:
        try:
            await supabase.patch(
                "/auth_tokens",
                params={"token": f"eq.{token}", "telegram_id": "is.null", "used": "is.false"},
                json={"telegram_id": user_id, "used": True}
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))
            ]])
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç.", reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token}: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))
        ]])
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä–æ–π –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

@router.message(F.text & ~F.command)
async def track_message(message: types.Message, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    # ‚úÖ –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
    logging.info("--- –ó–ê–ü–£–©–ï–ù–ê –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê track_message ---")
    
    user = message.from_user
    full_name = f"{user.first_name} {user.last_name or ''}".strip()

    try:
        await supabase.post(
            "/rpc/handle_user_message",
            json={"p_telegram_id": user.id, "p_full_name": full_name}
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_message –¥–ª—è user_id={user.id}: {e}", exc_info=True)

@app.post("/api/v1/webhook")
async def telegram_webhook(update: dict, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò ---
    logging.info("--- –ó–ê–ü–£–©–ï–ù–ê –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê webhook ---")
    
    # –°–ø–∏—Å–æ–∫ ID —Å–ª—É–∂–µ–±–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    SERVICE_ACCOUNT_IDS = {
        777000,     # 'Telegram' (—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞)
        1087968824, # 'Anonymous Admin' / 'Group'
        136817688,  # 'Group' (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π ID)
    }

    try:
        message = update.get("message")
        if not message:
            return JSONResponse(content={"status": "ignored", "reason": "no_message_field"})

        from_user = message.get("from", {})
        telegram_id = from_user.get("id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ª—É–∂–µ–±–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
        if not telegram_id or telegram_id in SERVICE_ACCOUNT_IDS:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: ID {telegram_id}")
            return JSONResponse(content={"status": "ignored", "reason": "service_account"})

        first_name = from_user.get("first_name", "")
        last_name = from_user.get("last_name", "")
        full_name = f"{first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ID: {telegram_id}, –ò–º—è: '{full_name}'")

        # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ Supabase
        await supabase.post(
            "/rpc/handle_user_message",
            json={
                "p_telegram_id": int(telegram_id),
                "p_full_name": full_name
            }
        )
        
        return JSONResponse(content={"status": "ok"})

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /api/v1/webhook: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å Telegram –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
        return JSONResponse(content={"status": "error", "message": str(e)})
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò ---
@app.get("/api/v1/auth/check_token")
async def check_token_auth(token: str, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    try:
        r = await supabase.get("/auth_tokens", params={"token": f"eq.{token}", "select": "telegram_id,used"})
        r.raise_for_status()
        data = r.json()
        if data and data[0].get("telegram_id") and data[0].get("used"):
            user_id = data[0]["telegram_id"]
            session_cookie = encode_cookie({"id": user_id})
            response = JSONResponse(content={"authenticated": True, "telegram_id": user_id})
            response.set_cookie(key="auth_session", value=session_cookie, path="/", max_age=604800, httponly=True, samesite="None", secure=True)
            return response
        return JSONResponse(content={"authenticated": False})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_token: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/auth/session_check")
async def session_check(request: Request):
    auth_cookie = request.cookies.get("auth_session")
    user_data = decode_cookie(auth_cookie)
    if not user_data or "id" not in user_data:
        return {"is_guest": True}
    return {"is_guest": False}
    
@app.post("/api/v1/quests/manual")
async def get_manual_quests(
    request_data: InitDataRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    telegram_id = user_info["id"]

    # 1. –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    completed_resp = await supabase.get(
        "/quest_submissions",
        params={"user_id": f"eq.{telegram_id}", "status": "eq.approved", "select": "quest_id"}
    )
    completed_resp.raise_for_status()
    completed_quest_ids = {sub['quest_id'] for sub in completed_resp.json()}

    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã —Å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    all_manual_quests_resp = await supabase.get(
        "/quests",
        params={
            "is_active": "eq.true", 
            "quest_type": "eq.manual_check", 
            "select": "*, quest_categories(name, sort_order)"
        }
    )
    all_manual_quests_resp.raise_for_status()
    all_manual_quests = all_manual_quests_resp.json()

    # 3. –§–∏–ª—å—Ç—Ä—É–µ–º –∫–≤–µ—Å—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    # –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–º–∏ (is_repeatable = true)
    available_quests = [
        quest for quest in all_manual_quests 
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é
        if quest.get('is_repeatable') or quest.get('id') not in completed_quest_ids
    ]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    available_quests.sort(key=lambda q: (
        (q.get('quest_categories') or {}).get('sort_order', 999), 
        -q.get('id', 0)
    ))

    return available_quests
    
@app.post("/api/v1/quests/categories")
async def get_quests_categories(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ó–∞–¥–∞–Ω–∏–π.
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

    resp = await supabase.get("/quest_categories", params={"select": "name,id", "order": "sort_order.asc"})
    resp.raise_for_status()
    return resp.json()
    
@app.post("/api/v1/quests/list")
async def get_public_quests(
    request_data: InitDataRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    telegram_id = user_info.get("id") if user_info else None

    if not telegram_id:
        return []

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç
    user_resp = await supabase.get("users", params={"telegram_id": f"eq.{telegram_id}", "select": "active_quest_id"})
    user_resp.raise_for_status()
    user_data = user_resp.json()
    
    active_quest_id = user_data[0].get("active_quest_id") if user_data else None

    # ‚úÖ –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò
    if active_quest_id:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –∫–≤–µ—Å—Ç –ø–æ ID, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏
        quest_check_resp = await supabase.get(
            "/quests",
            params={"id": f"eq.{active_quest_id}", "select": "is_active"}
        )
        quest_check_resp.raise_for_status()
        quest_check_data = quest_check_resp.json()

        # –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–∞–π–¥–µ–Ω –∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if quest_check_data and quest_check_data[0].get("is_active"):
            full_quest_resp = await supabase.get("/quests", params={"id": f"eq.{active_quest_id}", "select": "*"})
            active_quest = full_quest_resp.json()
            if active_quest:
                active_quest[0]['is_completed'] = False
            return active_quest
        else:
            # –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, "—Å–±—Ä–∞—Å—ã–≤–∞–µ–º" –µ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logging.warning(f"User {telegram_id} had an invalid active_quest_id ({active_quest_id}). Clearing it.")
            await supabase.patch("/users", params={"telegram_id": f"eq.{telegram_id}"}, json={"active_quest_id": None})
            # –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞, –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∏ –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
    # ‚úÖ –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò

    # 3. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –Ω–µ—Ç (–∏–ª–∏ –æ–Ω –±—ã–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–±—Ä–æ—à–µ–Ω), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    completed_resp = await supabase.get(
        "/user_quest_progress",
        params={
            "user_id": f"eq.{telegram_id}",
            "claimed_at": "not.is.null",  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ (–ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ)
            "select": "quest_id"
        }
    )
    completed_resp.raise_for_status()
    completed_quest_ids = {sub['quest_id'] for sub in completed_resp.json()}

    all_quests_resp = await supabase.get(
        "/quests",
        params={"is_active": "eq.true", "quest_type": "not.eq.manual_check", "select": "*", "order": "id.desc"}
    )
    all_quests_resp.raise_for_status()
    all_active_quests = all_quests_resp.json()

    available_quests = [
        quest for quest in all_active_quests
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ is_repeatable
        if quest.get('is_repeatable') or quest['id'] not in completed_quest_ids
    ]
    
    for q in available_quests:
        q['is_completed'] = False

    return fill_missing_quest_data(available_quests)

@app.get("/api/v1/auth/twitch_oauth")
async def twitch_oauth_start(initData: str):
    if not initData:
        raise HTTPException(status_code=400, detail="initData is required")
    state = create_twitch_state(initData)
    twitch_auth_url = (
        "https://id.twitch.tv/oauth2/authorize"
        f"?response_type=code"
        f"&client_id={TWITCH_CLIENT_ID}"
        f"&redirect_uri={TWITCH_REDIRECT_URI}"
        f"&scope=user:read:email"
        f"&state={state}"
    )
    response = Response(status_code=307)
    response.headers['Location'] = twitch_auth_url
    response.set_cookie(key="twitch_oauth_init_data", value=initData, max_age=300, path="/", samesite="None", secure=True)
    return response

@app.get("/api/v1/auth/twitch_callback")
async def twitch_oauth_callback(
    request: Request, 
    code: str = Query(...), 
    state: str = Query(...),
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    init_data = request.cookies.get("twitch_oauth_init_data")
    if not init_data or not validate_twitch_state(state, init_data):
        raise HTTPException(status_code=403, detail="Invalid state. CSRF attack?")
    async with httpx.AsyncClient() as client:
        token_response = await client.post(
            "https://id.twitch.tv/oauth2/token",
            data={
                "client_id": TWITCH_CLIENT_ID, "client_secret": TWITCH_CLIENT_SECRET,
                "code": code, "grant_type": "authorization_code", "redirect_uri": TWITCH_REDIRECT_URI,
            }
        )
        token_data = token_response.json()
        if "access_token" not in token_data:
            raise HTTPException(status_code=500, detail="Failed to get access token from Twitch")
        access_token = token_data["access_token"]
        headers = {"Authorization": f"Bearer {access_token}", "Client-Id": TWITCH_CLIENT_ID}
        user_response = await client.get("https://api.twitch.tv/helix/users", headers=headers)
        user_data = user_response.json()
        if not user_data.get("data"):
            raise HTTPException(status_code=500, detail="Failed to get user info from Twitch")
        twitch_user = user_data["data"][0]
        twitch_id = twitch_user["id"]
        twitch_login = twitch_user["login"] 
        user_info = is_valid_init_data(init_data, ALL_VALID_TOKENS)
        if not user_info or "id" not in user_info:
            raise HTTPException(status_code=401, detail="Invalid Telegram initData")
        telegram_id = user_info["id"]
        await supabase.patch(
            "/users",
            params={"telegram_id": f"eq.{telegram_id}"},
            json={"twitch_id": twitch_id, "twitch_login": twitch_login}
        )
    redirect_url = f"{WEB_APP_URL}/profile"
    response = Response(status_code=307)
    response.headers['Location'] = redirect_url
    response.delete_cookie("twitch_oauth_init_data", path="/", samesite="None", secure=True)
    return response

# --- Pydantic –º–æ–¥–µ–ª–∏ ---
class PromocodeDeleteRequest(BaseModel): initData: str; code: str
class InitDataRequest(BaseModel): initData: str
class QuestSubmission(BaseModel): initData: str; submittedData: str
class QuestSubmissionRequest(BaseModel): initData: str; submittedData: str    
class QuestCreateRequest(BaseModel): 
    initData: str
    title: str
    description: Optional[str] = ""
    reward_amount: int
    quest_type: str
    target_value: Optional[int] = None
    icon_url: Optional[str] = None
    duration_days: Optional[int] = None
    action_url: Optional[str] = None
    category_id: Optional[int] = None # <-- –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê –ë–´–õ–ê –ü–†–û–ü–£–©–ï–ù–ê
    is_repeatable: bool = False

class QuestUpdateRequest(BaseModel): 
    initData: str
    quest_id: int
    title: str
    description: Optional[str] = ""
    reward_amount: int
    quest_type: str
    target_value: Optional[int] = None
    icon_url: Optional[str] = None
    is_active: bool
    duration_days: Optional[int] = None
    action_url: Optional[str] = None
    category_id: Optional[int] = None
    is_repeatable: bool

class SubmissionUpdateRequest(BaseModel): initData: str; submission_id: int; action: str
class QuestDeleteRequest(BaseModel): initData: str; quest_id: int
class PromocodeAddRequest(BaseModel): initData: str; codes: str; reward_value: int; description: str
class PromocodeClaimRequest(BaseModel): initData: str; quest_id: int
class ChallengeAdminCreateRequest(BaseModel): initData: str; description: str; condition_type: str; target_value: int; duration_days: int; reward_amount: int; is_active: bool = True
class ChallengeAdminUpdateRequest(BaseModel): initData: str; challenge_id: int; description: str; condition_type: str; target_value: int; duration_days: int; reward_amount: int; is_active: bool
class ChallengeAdminDeleteRequest(BaseModel): initData: str; challenge_id: int
class QuestStartRequest(BaseModel):
    initData: str
    quest_id: int

# --- Main API Endpoints ---
@app.post("/api/v1/quests/{quest_id}/submit")
async def submit_for_quest(quest_id: int, request_data: QuestSubmissionRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–≤–µ—Å—Ç —Å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    telegram_id = user_info["id"]

    # ‚úÖ –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –∫–≤–µ—Å—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–º
    quest_resp = await supabase.get("/quests", params={"id": f"eq.{quest_id}", "select": "title, is_repeatable"})
    if not quest_resp.json():
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    quest_data = quest_resp.json()[0]
    quest_title = quest_data['title']
    is_quest_repeatable = quest_data['is_repeatable']

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞—è–≤–∫–∏, –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–≤–µ—Å—Ç –ù–ï –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π
    if not is_quest_repeatable:
        submission_check_resp = await supabase.get(
            "/quest_submissions", 
            params={"user_id": f"eq.{telegram_id}", "quest_id": f"eq.{quest_id}", "select": "status"}
        )
        previous_submissions = submission_check_resp.json()
        if previous_submissions:
            for submission in previous_submissions:
                if submission.get("status") == "pending":
                    raise HTTPException(status_code=400, detail="–í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
                if submission.get("status") == "approved":
                    raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")
    # ‚úÖ –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê

    # 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    await supabase.post("/quest_submissions", json={
        "quest_id": quest_id,
        "user_id": telegram_id,
        "status": "pending",
        "submitted_data": request_data.submittedData
    })

    # 4. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    if ADMIN_NOTIFY_CHAT_ID:
        try:
            user_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            message_text = (
                f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
                f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> ¬´{quest_title}¬ª\n"
                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name} (ID: {telegram_id})\n"
                f"<b>–î–∞–Ω–Ω—ã–µ:</b>\n<code>{request_data.submittedData}</code>"
            )
            await bot.send_message(ADMIN_NOTIFY_CHAT_ID, message_text, parse_mode=ParseMode.HTML)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    return {"message": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!"}
    
# --- –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ö–í–ï–°–¢–ê ---
@app.post("/api/v1/quests/start")
async def start_quest(request_data: QuestStartRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    # üü¢ INFO: –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
    logging.info("–ü—Ä–∏–Ω—è—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç –∫–≤–µ—Å—Ç–∞.")

    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    
    # üü¢ INFO: –ü—Ä–æ–≤–µ—Ä–∫–∞ initData
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ initData. –í–∞–ª–∏–¥–Ω–æ: {user_info is not None}")

    if not user_info or "id" not in user_info:
        # ‚ùå ERROR: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        logging.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

    telegram_id = user_info["id"]
    quest_id = request_data.quest_id

    # üü¢ INFO: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–≤–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}, ID –∫–≤–µ—Å—Ç–∞: {quest_id}")

    try:
        # üü¢ INFO: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Supabase
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Supabase RPC start_quest_atomic —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: p_user_id={telegram_id}, p_quest_id={quest_id}")

        await supabase.post(
            "/rpc/start_quest_atomic",
            json={"p_user_id": telegram_id, "p_quest_id": quest_id}
        )

        # üü¢ INFO: –ó–∞–ø—Ä–æ—Å –≤ Supabase —É—Å–ø–µ—à–µ–Ω
        logging.info("–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ Supabase.")
        return {"message": "–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."}
    except Exception as e:
        # ‚ùå ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞ {quest_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç.")
        
@app.post("/api/v1/user/promocodes/delete")
async def delete_promocode(request_data: PromocodeDeleteRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info: raise HTTPException(status_code=401, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    telegram_id = user_info["id"]; code_to_delete = request_data.code
    await supabase.patch("/promocodes", params={"code": f"eq.{code_to_delete}", "telegram_id": f"eq.{telegram_id}"}, json={"telegram_id": None})
    return {"message": "–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞."}

@app.post("/api/v1/user/promocodes/delete-all")
async def delete_all_user_promocodes(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """–£–¥–∞–ª—è–µ—Ç (–æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç) –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    telegram_id = user_info["id"]
    
    # –ì–æ–≤–æ—Ä–∏–º –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: "–ù–∞–π–¥–∏ –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–¥–µ–ª–∞–π –∏—Ö —Å–Ω–æ–≤–∞ –Ω–∏—á—å–∏–º–∏"
    await supabase.patch(
        "/promocodes",
        params={"telegram_id": f"eq.{telegram_id}"},
        json={"telegram_id": None} # –ú—ã –Ω–µ —É–¥–∞–ª—è–µ–º –∫–æ–¥, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ
    )
    
    return {"message": "–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞."}

@app.post("/api/v1/user/twitch/unlink")
async def unlink_twitch_account(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info: raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    telegram_id = user_info["id"]
    await supabase.patch("/users", params={"telegram_id": f"eq.{telegram_id}"}, json={"twitch_id": None, "twitch_login": None})
    return {"message": "–ê–∫–∫–∞—É–Ω—Ç Twitch —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω."}
    
# --- –ü–†–ê–í–ò–õ–¨–ù–û ---
@app.post("/api/v1/user/me")
async def get_current_user_data(
    request_data: InitDataRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        return JSONResponse(content={"is_guest": True})

    telegram_id = user_info["id"]
    is_admin = telegram_id in ADMIN_IDS

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ê–ü–†–Ø–ú–£–Æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        user_resp = await supabase.get(
            "/users",
            params={"telegram_id": f"eq.{telegram_id}", "select": "*", "limit": 1}
        )
        user_resp.raise_for_status()
        user_data = user_resp.json()

        # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–Ω–æ–≤–∞
        if not user_data:
            full_name_tg = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            await supabase.post(
                "/users",
                json={"telegram_id": telegram_id, "username": user_info.get("username"), "full_name": full_name_tg},
                headers={"Prefer": "resolution=merge-duplicates"}
            )
            user_resp = await supabase.get("/users", params={"telegram_id": f"eq.{telegram_id}", "select": "*", "limit": 1})
            user_data = user_resp.json()

        if not user_data:
            return JSONResponse(content={"is_guest": True, "is_admin": is_admin})

        profile_data = user_data[0]
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
        active_quest_id = profile_data.get("active_quest_id")
        active_progress = 0
        if active_quest_id:
            progress_resp = await supabase.get(
                "/user_quest_progress",
                params={"user_id": f"eq.{telegram_id}", "quest_id": f"eq.{active_quest_id}", "select": "current_progress"}
            )
            progress_data = progress_resp.json()
            if progress_data:
                active_progress = progress_data[0].get("current_progress", 0)

        # 4. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏
        entries_resp = await supabase.get(
            "/event_entries",
            params={"user_id": f"eq.{telegram_id}", "select": "event_id, tickets_spent"}
        )
        entries_data = entries_resp.json()
        event_participations = {}
        for entry in entries_data:
            event_id = entry.get("event_id")
            tickets_spent = entry.get("tickets_spent", 0)
            if event_id is not None:
                event_participations[event_id] = event_participations.get(event_id, 0) + tickets_spent

        # 5. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ profile_data
        final_response_data = {
            "is_guest": False,
            "full_name": profile_data.get("full_name"),
            "twitch_id": profile_data.get("twitch_id"),
            "twitch_login": profile_data.get("twitch_login"),
            "is_admin": is_admin,
            "active_quest_id": active_quest_id,
            "active_quest_progress": active_progress,
            "tickets": profile_data.get("tickets", 0),
            "trade_link": profile_data.get("trade_link"), # <-- –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
            "event_participations": event_participations,
            "twitch_stats": {
                "messages": profile_data.get("total_message_count", 0),
                "daily_messages": profile_data.get("daily_message_count", 0),
                "weekly_messages": profile_data.get("weekly_message_count", 0),
                "monthly_messages": profile_data.get("monthly_message_count", 0),
                "uptime": profile_data.get("total_uptime_minutes", 0),
                "daily_uptime": profile_data.get("daily_uptime_minutes", 0),
                "weekly_uptime": profile_data.get("weekly_uptime_minutes", 0),
                "monthly_uptime": profile_data.get("monthly_uptime_minutes", 0),
            }
        }
        return JSONResponse(content=final_response_data)

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /api/v1/user/me: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")

@app.post("/api/v1/admin/quest/submissions")
async def get_submissions_for_quest(request_data: QuestDeleteRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS: raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    quest_id = request_data.quest_id
    response = await supabase.post("/rpc/get_quest_submissions_with_details", json={"p_quest_id": quest_id})
    return response.json()

@app.post("/api/v1/admin/quests")
async def create_quest(request_data: QuestCreateRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

@app.post("/api/v1/admin/quest/update")
async def update_quest(request_data: QuestUpdateRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS: 
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    quest_id = request_data.quest_id
    quest_data_to_update = request_data.dict(exclude={'initData', 'quest_id'})
    
    duration = quest_data_to_update.pop('duration_days', None)
    
    if duration is not None:
        if duration > 0:
            quest_data_to_update['end_date'] = (datetime.now(timezone.utc) + timedelta(days=duration)).isoformat()
            quest_data_to_update['start_date'] = datetime.now(timezone.utc).isoformat()
        else: 
            quest_data_to_update['end_date'] = None
            
    await supabase.patch("/quests", params={"id": f"eq.{quest_id}"}, json=quest_data_to_update)
    
    return {"message": f"–ö–≤–µ—Å—Ç '{request_data.title}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"}

    quest_to_create = {
        "title": request_data.title,
        "description": request_data.description,
        "reward_amount": request_data.reward_amount,
        "quest_type": request_data.quest_type,
        "target_value": request_data.target_value,
        "icon_url": request_data.icon_url,
        "action_url": request_data.action_url,
        "category_id": request_data.category_id,
        "is_active": True,
        "start_date": datetime.now(timezone.utc).isoformat(),
        "is_repeatable": request_data.is_repeatable
    }
    
    # ‚úÖ‚úÖ‚úÖ –í–û–¢ –≠–¢–û –ò –ï–°–¢–¨ –ó–ê–ú–ï–ù–ê / –î–û–ü–û–õ–ù–ï–ù–ò–ï ‚úÖ‚úÖ‚úÖ
    # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–µ—Å—Ç—ã (Twitch/Telegram)
    # –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ –æ—à–∏–±–∫–µ.
    if quest_to_create.get('quest_type') != 'manual_check':
        quest_to_create['category_id'] = None

    duration = request_data.duration_days
    if duration and duration > 0:
        quest_to_create['end_date'] = (datetime.now(timezone.utc) + timedelta(days=duration)).isoformat()
    else:
        quest_to_create['end_date'] = None
    
    await supabase.post("/quests", json=quest_to_create)
    return {"message": f"–ö–≤–µ—Å—Ç '{request_data.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"}

@app.post("/api/v1/admin/user_challenges")
async def get_user_challenges_by_admin(
    request_data: UserChallengesRequest, 
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    user_id = request_data.user_id
    
    resp = await supabase.get(
        "/user_challenges",
        params={
            "user_id": f"eq.{user_id}",
            "select": "*,challenges(*)"
        }
    )
    resp.raise_for_status()
    challenges = resp.json()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º condition_type –Ω–∞ base_condition_type –∏ period
    for c in challenges:
        if c.get("challenges") and c["challenges"].get("condition_type"):
            condition_type = c["challenges"]["condition_type"]

            parts = condition_type.split("_")
            if len(parts) > 2 and (parts[1] in ["messages", "uptime"]):
                c["challenges"]["base_condition_type"] = parts[0] + "_" + parts[1]
                c["challenges"]["period"] = parts[2]
            else:
                c["challenges"]["base_condition_type"] = condition_type
                c["challenges"]["period"] = None

            # üî• progress –±–µ—Ä—ë–º –ø—Ä—è–º–æ –∏–∑ user_challenges
            c["progress_value"] = c.get("progress_value", 0)

    return challenges


@app.post("/api/v1/admin/quest/delete")
async def delete_quest(request_data: QuestDeleteRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS: raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    quest_id = request_data.quest_id
    await supabase.delete("/quest_submissions", params={"quest_id": f"eq.{quest_id}"})
    await supabase.delete("/quests", params={"id": f"eq.{quest_id}"})
    return {"message": "–ó–∞–¥–∞–Ω–∏–µ –∏ –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ –Ω–µ–º—É —É–¥–∞–ª–µ–Ω—ã."}
    
@app.post("/api/v1/admin/quest/details")
async def get_quest_details(request_data: QuestDeleteRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS: raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    quest_id = request_data.quest_id
    response = await supabase.get("/quests", params={"id": f"eq.{quest_id}", "select": "*"})
    quests = response.json()
    if not quests: raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    quest = quests[0]
    if quest.get('end_date') and quest.get('start_date'):
        try:
            end = datetime.fromisoformat(quest['end_date'].replace('Z', '+00:00')); start = datetime.fromisoformat(quest['start_date'].replace('Z', '+00:00'))
            quest['duration_days'] = (end - start).days
        except (ValueError, TypeError): quest['duration_days'] = 0
    else: quest['duration_days'] = 0
    return quest

@app.post("/api/v1/promocode")
async def get_promocode(
    request_data: PromocodeClaimRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="Unauthorized")

    user_id = user_info["id"]
    quest_id = request_data.quest_id

    try:
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é SQL-—Ñ—É–Ω–∫—Ü–∏—é
        response = await supabase.post(
            "/rpc/award_reward_and_get_promocode",
            json={
                "p_user_id": user_id,
                "p_source_type": "quest",
                "p_source_id": quest_id
            }
        )
        response.raise_for_status()
        
        promocode_data = response.json()
        return {
            "message": "–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
            "promocode": promocode_data
        }
    except httpx.HTTPStatusError as e:
        error_details = e.response.json().get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–≤–µ—Å—Ç: {error_details}")
        raise HTTPException(status_code=400, detail=error_details)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–≤–µ—Å—Ç: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.")
# --- –ê–î–ú–ò–ù–°–ö–ò–ï –ü–†–û–ú–û–ö–û–î–´ ---
@app.post("/api/v1/admin/promocodes")
async def create_promocodes(
    request_data: PromocodeCreateRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–¥—ã, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤ textarea, –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    codes = [c.strip() for c in request_data.codes.split("\n") if c.strip()]
    if not codes:
        raise HTTPException(status_code=400, detail="–ü–æ–ª–µ —Å –∫–æ–¥–∞–º–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    try:
        # –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        promocodes_to_insert = [
            {
                "code": code,
                "reward_value": request_data.reward_value,
                "description": request_data.description
            }
            for code in codes
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        resp = await supabase.post("/promocodes", json=promocodes_to_insert)
        resp.raise_for_status()

        return {"message": f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(codes)} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"}
    except httpx.HTTPStatusError as e:
        error_details = e.response.json().get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {error_details}")
        raise HTTPException(status_code=400, detail=error_details)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã.")
# --- –ê–î–ú–ò–ù–°–ö–ò–ï –ü–†–û–ú–û–ö–û–î–´  ---        
@app.get("/api/v1/cron/trigger_draws")
async def trigger_draws(
    request: Request,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã. –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏—Å—Ç–µ–∫–ª–æ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
    –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —ç—Ç–æ–≥–æ –∏–≤–µ–Ω—Ç–∞.
    –ó–∞—â–∏—â–µ–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization.
    """
    cron_secret = os.getenv("CRON_SECRET")
    auth_header = request.headers.get("Authorization")
    if not cron_secret or auth_header != f"Bearer {cron_secret}":
        raise HTTPException(status_code=403, detail="Forbidden: Invalid secret")

    logging.info("üöÄ CRON: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≤–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞...")
    
    try:
        content_resp = await supabase.get("/pages_content", params={"page_name": "eq.events", "select": "content", "limit": 1})
        content_resp.raise_for_status()
        page_data = content_resp.json()
        if not page_data:
            logging.warning("CRON: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≤–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return {"message": "Events content not found."}
        
        content = page_data[0]['content']
        raffle_end_time_str = content.get("raffleEndTime")

        if not raffle_end_time_str:
            logging.info("CRON: –í—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return {"message": "Raffle end time not set."}

        # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ò ---
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC (–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä)
        now_utc = datetime.now(timezone.utc)
        
        # 2. –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –∏ –≥–æ–≤–æ—Ä–∏–º –∫–æ–¥—É, —á—Ç–æ —ç—Ç–æ –ú–û–°–ö–û–í–°–ö–û–ï –≤—Ä–µ–º—è (UTC+3)
        naive_end_time = datetime.fromisoformat(raffle_end_time_str)
        end_time_moscow = naive_end_time.replace(tzinfo=ZoneInfo("Europe/Moscow"))
        
        # 3. –¢–µ–ø–µ—Ä—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
        if now_utc < end_time_moscow:
            logging.info(f"CRON: –í—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ({end_time_moscow}) –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {now_utc}.")
            return {"message": "Raffle time has not yet come."}
            
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ò ---

        logging.info("CRON: –í—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ. –ü–æ–∏—Å–∫ –∏–≤–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...")
        
        events_to_draw = [e for e in content.get("events", []) if "winner_name" not in e]
        
        if not events_to_draw:
            logging.info("CRON: –ù–µ—Ç –∏–≤–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—É –≤—Å–µ—Ö —É–∂–µ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏).")
            return {"message": "No events to draw."}
        
        updated = False
        for event in events_to_draw:
            event_id = event["id"]
            logging.info(f"--- –ó–∞–ø—É—Å–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –∏–≤–µ–Ω—Ç–∞ ID: {event_id} ---")

            rpc_response = await supabase.post("/rpc/draw_event_winner", json={"p_event_id": event_id})
            
            if rpc_response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ RPC –¥–ª—è –∏–≤–µ–Ω—Ç–∞ {event_id}: {rpc_response.text}")
                continue
            
            winner_data = rpc_response.json()
            if not winner_data:
                logging.warning(f"–î–ª—è –∏–≤–µ–Ω—Ç–∞ {event_id} –Ω–µ –Ω–∞—à–ª–æ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                continue

            winner = winner_data[0]
            winner_id = winner.get('winner_id')
            winner_name = winner.get('winner_name')

            event["winner_name"] = winner_name
            event["winner_id"] = winner_id
            updated = True
            
            logging.info(f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–ª—è –∏–≤–µ–Ω—Ç–∞ {event_id}: {winner_name} (ID: {winner_id})")

            try:
                message_text = (
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {winner_name}!\n\n"
                    f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–∞ ¬´{event.get('title', '')}¬ª! "
                    f"–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞."
                )
                await bot.send_message(winner_id, message_text)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é {winner_id}: {e}")

        if updated:
            await supabase.patch(
                "/pages_content",
                params={"page_name": "eq.events"},
                json={"content": content}
            )
            logging.info("CRON: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ.")

        return {"message": f"Draw process completed. Winners selected for {len(events_to_draw)} event(s)."}

    except Exception as e:
        logging.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ cron-–∑–∞–¥–∞—á–µ: {e}", exc_info=True)
        return JSONResponse(status_code=500, content={"error": str(e)})
        
@app.post("/api/v1/cron/sync_leaderboard")
async def sync_leaderboard_to_supabase(
    request: Request,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    cron_secret = os.getenv("CRON_SECRET")
    auth_header = request.headers.get("Authorization")
    if not cron_secret or auth_header != f"Bearer {cron_secret}":
        raise HTTPException(status_code=403, detail="Forbidden: Invalid secret")

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –û–ë–©–ò–ô –õ–ò–î–ï–†–ë–û–†–î...")

    if not WIZEBOT_API_KEY:
        raise HTTPException(status_code=500, detail="Wizebot API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –º—ã —Ö–æ—Ç–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    metrics_to_sync = [
        {"name": "message", "metric_type_db": "messages"},
        {"name": "uptime", "metric_type_db": "uptime"}
    ]
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º set, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞
        users_to_recalculate = set()

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–µ (—Å–æ–æ–±—â–µ–Ω–∏—è, –≤—Ä–µ–º—è)
        for metric in metrics_to_sync:
            metric_name = metric["name"]
            metric_type_db = metric["metric_type_db"]
            logging.info(f"--- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫–∏: {metric_name} ---")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ø-100 —É Wizebot
            limit = 100
            url = f"https://wapi.wizebot.tv/api/ranking/{WIZEBOT_API_KEY}/top/{metric_name}/session/{limit}"
            
            leaderboard_data = []
            updated_user_logins = set()
            try:
                async with httpx.AsyncClient() as client:
                    resp = await client.get(url, timeout=25.0)
                    resp.raise_for_status()
                    data = resp.json()
                    leaderboard_data = data.get("list", [])
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ({metric_name}) –æ—Ç Wizebot: {e}")
                continue

            if not leaderboard_data:
                logging.info(f"–õ–∏–¥–µ—Ä–±–æ—Ä–¥ ({metric_name}) –æ—Ç Wizebot –ø—É—Å—Ç.")
                continue
            
            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–∞—à—É "—É–º–Ω—É—é" SQL-—Ñ—É–Ω–∫—Ü–∏—é
            stats_payload = []
            for entry in leaderboard_data:
                twitch_login = entry.get("user_name")
                value = int(entry.get("value", 0))
                if twitch_login:
                    stats_payload.append({"twitch_login": twitch_login.lower(), "value": value})
                    updated_user_logins.add(twitch_login.lower())

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä p_period, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π sync_twitch_stats
            await supabase.post(
                "/rpc/sync_twitch_stats",
                json={
                    "p_metric_type": metric_type_db,
                    "p_period": "session",  # <-- –í–æ—Ç –∑–¥–µ—Å—å –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä
                    "p_stats": stats_payload
                }
            )
            
            # –ù–∞—Ö–æ–¥–∏–º telegram_id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
            if updated_user_logins:
                users_resp = await supabase.get(
                    "/users",
                    params={"select": "telegram_id", "twitch_login": f"in.({','.join(map(lambda x: f'\"{x}\"', updated_user_logins))})"}
                )
                users_resp.raise_for_status()
                for user in users_resp.json():
                    if user.get("telegram_id"):
                        users_to_recalculate.add(user["telegram_id"])

        # ‚úÖ –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users_to_recalculate:
            logging.info(f"–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å Twitch –¥–ª—è {len(users_to_recalculate)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            for user_id in users_to_recalculate:
                await supabase.post("/rpc/recalculate_twitch_progress", json={"p_user_id": user_id})

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Twitch: {e}", exc_info=True)
        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–∫–∏ 500
        # raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Twitch")

    logging.info("üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Twitch –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return {"message": "Leaderboard sync completed."}
    
@app.post("/api/v1/challenges/{challenge_id}/claim")
async def claim_challenge(
    challenge_id: int,
    request_data: InitDataRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    current_user_id = user_info["id"]

    try:
        logging.info(f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —á–µ–ª–ª–µ–Ω–¥–∂ {challenge_id}")

        # –ò—â–µ–º user_challenge, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –µ—â–µ –Ω–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω
        response = await supabase.get(
            "/user_challenges",
            params={
                "user_id": f"eq.{current_user_id}",
                "challenge_id": f"eq.{challenge_id}",
                "status": "eq.completed",
                "claimed_at": "is.null",
                "select": "*",
                "limit": 1
            }
        )
        response.raise_for_status()
        user_challenges_data = response.json()

        if not user_challenges_data:
            raise HTTPException(status_code=404, detail="–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.")

        user_challenge = user_challenges_data[0]
        user_challenge_id = user_challenge["id"]

        logging.info(f"üîπ –ù–∞–π–¥–µ–Ω user_challenge —Å ID: {user_challenge_id}. –°—Ç–∞—Ç—É—Å: {user_challenge['status']}, claimed_at: {user_challenge['claimed_at']}")

        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è —Å SQL, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
        if user_challenge["claimed_at"] is not None:
            raise HTTPException(status_code=400, detail="–ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.")

        if user_challenge["status"] != "completed":
            raise HTTPException(status_code=400, detail="–ß–µ–ª–ª–µ–Ω–¥–∂ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

        rpc_payload = {
            "p_user_id": current_user_id,
            "p_source_type": "challenge",
            "p_source_id": user_challenge_id
        }

        logging.info(f"üîπ –í—ã–∑–æ–≤ RPC —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {rpc_payload}")

        rpc_response = await supabase.post("/rpc/award_reward_and_get_promocode", json=rpc_payload)
        
        logging.info(f"üîπ RPC —Å—Ç–∞—Ç—É—Å: {rpc_response.status_code}")
        logging.info(f"üîπ RPC —Ç–µ–ª–æ: {rpc_response.text}")
        
        if rpc_response.status_code != 200:
            try:
                error_detail = rpc_response.json().get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.")
            except:
                error_detail = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Supabase."
            raise HTTPException(status_code=400, detail=error_detail)

        promocode = rpc_response.json()

        return {
            "success": True,
            "show_reward_modal": True,
            "message": "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!",
            "promocode": promocode
        }

    except httpx.HTTPStatusError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Supabase: {e.response.text}", exc_info=True)
        raise HTTPException(status_code=e.response.status_code, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥—ã: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        
@app.get("/api/v1/challenges/{challenge_id}/debug")
async def check_challenge_state(
    challenge_id: int,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    try:
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ {challenge_id}")

        # –ü–æ–ª—É—á–∞–µ–º user_challenge + reward_amount
        challenge_resp = await supabase.get(
            "/user_challenges",
            params={
                "id": f"eq.{challenge_id}",
                "select": "*,challenges(reward_amount)"
            }
        )
        challenge_resp.raise_for_status()
        challenge_data = challenge_resp.json()

        if not challenge_data:
            return {"error": "–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        challenge = challenge_data[0]
        user_id = challenge["user_id"]
        reward_amount = challenge["challenges"]["reward_amount"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        promo_resp = await supabase.get(
            "/promocodes",
            params={
                "is_used": "eq.false",
                "reward_value": f"eq.{reward_amount}",
                "limit": "1"
            }
        )
        promo_resp.raise_for_status()
        promo_data = promo_resp.json()

        # –ü—Ä–æ–±–Ω—ã–π –≤—ã–∑–æ–≤ RPC
        rpc_resp = await supabase.post(
            "/rpc/award_reward_and_get_promocode",
            json={
                "p_user_id": user_id,
                "p_source_type": "challenge",
                "p_source_id": challenge_id
            }
        )
        rpc_text = rpc_resp.text
        rpc_status = rpc_resp.status_code

        return {
            "challenge": {
                "id": challenge["id"],
                "user_id": user_id,
                "status": challenge["status"],
                "claimed_at": challenge["claimed_at"],
                "reward_amount": reward_amount
            },
            "promocode_available": bool(promo_data),
            "rpc_response_status": rpc_status,
            "rpc_response_text": rpc_text
        }

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}", exc_info=True)
        return {"error": str(e)}

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ, –Ω—É–∂–Ω–æ –ª–∏—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ recalculate_twitch_progress
@app.post("/api/v1/cron/sync_wizebot")
async def sync_wizebot_stats(request: Request, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    # --- –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –°–ï–ö–†–ï–¢–ê (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à —Å–µ–∫—Ä–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    cron_secret = os.getenv("CRON_SECRET")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª–µ—Ç cron-job.org
    auth_header = request.headers.get("Authorization")
    expected_header = f"Bearer {cron_secret}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ –∏ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    if not cron_secret or auth_header != expected_header:
        raise HTTPException(status_code=403, detail="Forbidden: Invalid secret")
    # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –°–ï–ö–†–ï–¢–ê ---
    
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Wizebot...")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Twitch
    users_resp = await supabase.get("/users", params={"twitch_login": "not.is.null", "select": "twitch_login"})
    if not users_resp.is_success:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase")
    
    users_to_sync = users_resp.json()
    
    if not users_to_sync:
        logging.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Twitch –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")
        return {"message": "No users to sync."}

    synced_count = 0
    # 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user in users_to_sync:
        twitch_login = user.get("twitch_login")
        if not twitch_login:
            continue

        try:
            # 3. –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Wizebot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            wizebot_url = f"https://wapi.wizebot.tv/api/user/{WIZEBOT_API_KEY}/{twitch_login}/info"
            async with httpx.AsyncClient() as client:
                wizebot_resp = await client.get(wizebot_url, timeout=10.0)
            
            if wizebot_resp.status_code == 200:
                wizebot_data = wizebot_resp.json()
                if "data" in wizebot_data and wizebot_data["data"]:
                    user_data = wizebot_data["data"][0]
                    message_count = int(user_data.get("nb_messages", 0))
                    
                    # 4. –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –ù–û–í–£–Æ "—É–º–Ω—É—é" RPC —Ñ—É–Ω–∫—Ü–∏—é –≤ Supabase
                    await supabase.post(
                        "/rpc/sync_twitch_stats", 
                        json={
                            "p_metric_type": metric_type_db,
                            "p_period": "session",  # <-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
                            "p_stats": stats_payload
                        }
                    )
                    logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω {twitch_login}: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
                    synced_count += 1
                else:
                    logging.warning(f"‚ö†Ô∏è Wizebot –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {twitch_login}")
            else:
                 logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Wizebot –¥–ª—è {twitch_login}: {wizebot_resp.status_code}")

        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {twitch_login}: {e}")

    logging.info(f"üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {synced_count}/{len(users_to_sync)}")
    return {"message": f"Sync completed. Updated {synced_count} users."}
    
@app.post("/api/v1/admin/submissions")
async def get_pending_submissions(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS: raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    response = await supabase.post("/rpc/get_pending_submissions_with_details")
    return response.json()

# --- –ù–û–í–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö ---
async def award_reward_and_notify(
    user_id: int, 
    quest_title: str, 
    promocode: dict
):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    """
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ, —Å–≤–µ–∂–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    async with httpx.AsyncClient(
        base_url=f"{os.getenv('SUPABASE_URL')}/rest/v1",
        headers={"apikey": os.getenv('SUPABASE_SERVICE_ROLE_KEY'), "Authorization": f"Bearer {os.getenv('SUPABASE_SERVICE_ROLE_KEY')}"},
        timeout=30.0
    ) as supabase:
        # 1. –ù–∞—á–∏—Å–ª—è–µ–º —Ç–∏–∫–µ—Ç
        try:
            await supabase.post(
                "/rpc/increment_tickets",
                json={"p_user_id": user_id, "p_amount": 1}
            )
            logging.info(f"–§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –ù–∞—á–∏—Å–ª–µ–Ω 1 —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        except Exception as e:
            logging.error(f"–§–û–ù–û–í–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–∏–∫–µ—Ç: {e}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        promo_code = promocode['code']
        activation_url = f"https://t.me/HATElavka_bot?start={promo_code}"
        notification_text = (
            f"<b>–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–≤–µ—Å—Ç ¬´{quest_title}¬ª!</b>\n\n"
            f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –≤ @HATElavka_bot –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤—ë–∑–¥.\n\n"
            f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:\n<code>{promo_code}</code>\n\n"
            f"<i>–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.</i>"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ HATElavka", url=activation_url)]])
        await bot.send_message(user_id, text=notification_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        logging.info(f"–§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        logging.error(f"–§–û–ù–û–í–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ: {e}")


# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

async def send_approval_notification(user_id: int, quest_title: str, promo_code: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ–Ω–µ."""
    try:
        safe_promo_code = re.sub(r"[^a-zA-Z0-9_]", "_", promo_code)
        activation_url = f"https://t.me/HATElavka_bot?start={safe_promo_code}"
        notification_text = (
            f"<b>üéâ –¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–≤–µ—Å—Ç ¬´{quest_title}¬ª!</b>\n\n"
            f"–°–∫–æ–ø–∏—Ä—É–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ @HATElavka_bot, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∑–≤—ë–∑–¥—ã.\n\n"
            f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:\n<code>{promo_code}</code>\n\n"
            f"<i>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.</i>"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ HATElavka", url=activation_url)]])
        await bot.send_message(user_id, text=notification_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        logging.info(f"–§–æ–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")

@app.post("/api/v1/admin/submission/update")
async def update_submission_status(
    request_data: SubmissionUpdateRequest,
    background_tasks: BackgroundTasks, # <-- –î–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    submission_id = request_data.submission_id
    action = request_data.action

    submission_data_resp = await supabase.get(
        "/quest_submissions",
        params={"id": f"eq.{submission_id}", "select": "user_id, quest:quests(title, is_repeatable)"}
    )
    submission_data = submission_data_resp.json()
    if not submission_data:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    user_to_notify = submission_data[0]['user_id']
    quest_title = submission_data[0]['quest']['title']

    if action == 'rejected':
        await supabase.patch("/quest_submissions", params={"id": f"eq.{submission_id}"}, json={"status": "rejected"})
        # –ú–æ–∂–Ω–æ –∏ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        background_tasks.add_task(bot.send_message, user_to_notify, f"‚ùå –£–≤—ã, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–≤–µ—Å—Ç ¬´{quest_title}¬ª –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        return {"message": "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."}

    elif action == 'approved':
        try:
            response = await supabase.post(
                "/rpc/award_reward_and_get_promocode",
                json={ "p_user_id": user_to_notify, "p_source_type": "manual_submission", "p_source_id": submission_id }
            )
            response.raise_for_status()
            promo_code = response.text.strip('"')

            # –í–º–µ—Å—Ç–æ await bot.send_message –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            background_tasks.add_task(send_approval_notification, user_to_notify, quest_title, promo_code)

            return {"message": "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ù–∞–≥—Ä–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", "promocode": promo_code}

        except httpx.HTTPStatusError as e:
            error_details = e.response.json().get("message", "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            logging.error(f"–û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {submission_id}: {error_details}")
            raise HTTPException(status_code=400, detail=error_details)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {submission_id}: {e}", exc_info=True)
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.")
    else:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        
# --- –í–ê–® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –≠–ù–î–ü–û–ò–ù–¢ (–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@app.get("/api/v1/leaderboard/wizebot")
async def get_wizebot_leaderboard(sub_type: str = "ALL", limit: int = 50):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
    if not WIZEBOT_API_KEY:
        raise HTTPException(status_code=500, detail="Wizebot API is not configured.")

    url = f"https://wapi.wizebot.tv/api/ranking/{WIZEBOT_API_KEY}/top/ranks/{sub_type}/{limit}"

    async with httpx.AsyncClient() as client:
        try:
            resp = await client.get(url, timeout=15.0)
            resp.raise_for_status()
            data = resp.json()

            formatted_data = [
                {
                    "full_name": entry.get("user_name"),
                    "user_id": entry.get("user_uid"),
                    "total_activity": int(entry.get("value", 0))
                }
                for entry in data.get("list", [])
            ]

            return formatted_data

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wizebot API: {e}")
            return JSONResponse(
                status_code=502,
                content={"error": "Failed to fetch leaderboard from Wizebot"}
            )


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥) ---
@app.get("/api/v1/leaderboard/wizebot/stats")
async def get_wizebot_stats(
    metric: str = Query("message", enum=["message", "uptime"]), 
    period: str = Query("week", enum=["session", "week", "month", "global"]),
    limit: int = 50
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Wizebot –ø–æ —Ä–∞–∑–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º –∏ –ø–µ—Ä–∏–æ–¥–∞–º.
    - metric: 'message' (—Å–æ–æ–±—â–µ–Ω–∏—è) –∏–ª–∏ 'uptime' (–≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞).
    - period: 'week', 'month' –∏–ª–∏ 'uptime' (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞—à–∏–º –ø—Ä–∏–º–µ—Ä–æ–º).
    """
    if not WIZEBOT_API_KEY:
        raise HTTPException(status_code=500, detail="Wizebot API is not configured.")

    # –°–æ–±–∏—Ä–∞–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞
    url = f"https://wapi.wizebot.tv/api/ranking/{WIZEBOT_API_KEY}/top/{metric}/{period}/{limit}"

    async with httpx.AsyncClient() as client:
        try:
            resp = await client.get(url, timeout=15.0)
            resp.raise_for_status()
            data = resp.json()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ
            # 'value' –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏–±–æ –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ª–∏–±–æ –º–∏–Ω—É—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            formatted_data = [
                {
                    "username": entry.get("user_name"),
                    "user_id": entry.get("user_uid"),
                    "value": int(entry.get("value", 0))
                }
                for entry in data.get("list", [])
            ]

            return {"metric": metric, "period": period, "leaderboard": formatted_data}

        except httpx.HTTPStatusError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Wizebot API: {e.response.status_code} - {e.response.text}")
            return JSONResponse(
                status_code=e.response.status_code,
                content={"error": "Failed to fetch stats from Wizebot", "detail": e.response.text}
            )
        except Exception as e:
            logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wizebot API: {e}")
            return JSONResponse(
                status_code=502,
                content={"error": "An unexpected error occurred while communicating with Wizebot"}
            )



@app.get("/api/v1/leaderboard")
async def get_leaderboard_data(request: Request, period: str = "day", supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    MSK = timezone(timedelta(hours=3)); now = datetime.now(MSK); start_date_str = None
    if period == "day": start_date_str = now.date().isoformat()
    elif period == "week": start_date_str = (now.date() - timedelta(days=now.weekday())).isoformat()
    elif period == "month": start_date_str = now.date().replace(day=1).isoformat()
    elif period != "all": raise HTTPException(status_code=400, detail="Invalid period")
    params = {"p_start_date": start_date_str} if start_date_str else {}
    response = await supabase.post("/rpc/get_leaderboard", json=params); response.raise_for_status()
    return response.json()

@app.post("/api/v1/user/rewards")
async def get_user_rewards(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info: raise HTTPException(status_code=401, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    rewards_resp = await supabase.get("/promocodes", params={"telegram_id": f"eq.{user_info['id']}", "select": "code,description,reward_value,claimed_at", "order": "claimed_at.desc"})
    return rewards_resp.json()

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ö–í–ï–°–¢–û–í ---
@app.post("/api/v1/promocode")
async def get_promocode(
    request_data: PromocodeClaimRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="Unauthorized")

    user_id = user_info["id"]
    quest_id = request_data.quest_id

    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å
        progress_resp = await supabase.get(
            "/user_quest_progress",
            params={
                "user_id": f"eq.{user_id}",
                "quest_id": f"eq.{quest_id}",
                "status": "eq.completed",
                "claimed_at": "is.null",
                "select": "id",
                "limit": 1
            }
        )
        progress_resp.raise_for_status()
        progress_data = progress_resp.json()

        if not progress_data:
            raise HTTPException(status_code=404, detail="–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ RPC
        progress_id_to_claim = progress_data[0]['id']

        # 3. –í—ã–∑—ã–≤–∞–µ–º RPC-—Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        response = await supabase.post(
            "/rpc/award_reward_and_get_promocode",
            json={
                "p_user_id": user_id,
                "p_source_type": "quest",
                "p_source_id": progress_id_to_claim # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
            }
        )
        response.raise_for_status()
        
        promocode_data = response.json()
        return {
            "message": "–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
            "promocode": promocode_data
        }
    except httpx.HTTPStatusError as e:
        error_details = e.response.json().get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–≤–µ—Å—Ç: {error_details}")
        raise HTTPException(status_code=400, detail=error_details)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–≤–µ—Å—Ç: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.")
    
# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
@app.post("/api/v1/user/challenge/available")
async def get_available_challenges(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info: raise HTTPException(status_code=401, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    telegram_id = user_info["id"]

    pending_resp = await supabase.get("/user_challenges", params={"user_id": f"eq.{telegram_id}", "status": "eq.pending", "select": "id"})
    if pending_resp.json(): raise HTTPException(status_code=409, detail="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂.")

    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Twitch —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_resp = await supabase.get("/users", params={"telegram_id": f"eq.{telegram_id}", "select": "twitch_id"})
    user_has_twitch = user_resp.json() and user_resp.json()[0].get("twitch_id") is not None

    completed_resp = await supabase.get("/user_challenges", params={"user_id": f"eq.{telegram_id}", "status": "in.(claimed,expired)", "select": "challenge_id"})
    completed_ids = {c['challenge_id'] for c in completed_resp.json()}
    
    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∫–≤–µ—Å—Ç–∞ (condition_type), —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
    available_resp = await supabase.get("/challenges", params={"is_active": "eq.true", "select": "id,description,reward_amount,condition_type"})
    all_available = [c for c in available_resp.json() if c['id'] not in completed_ids]

    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –§–∏–ª—å—Ç—Ä—É–µ–º –∫–≤–µ—Å—Ç—ã, –µ—Å–ª–∏ –Ω–µ—Ç Twitch
    if not user_has_twitch:
        final_available = [c for c in all_available if c.get("condition_type") != 'twitch_points']
    else:
        final_available = all_available

    return final_available
    
@app.post("/api/v1/user/challenge")
async def get_or_assign_user_challenge(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    telegram_id = user_info["id"]

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
    pending_resp = await supabase.get(
        "/user_challenges",
        params={"user_id": f"eq.{telegram_id}", "status": "eq.pending", "select": "*,challenges(*)"}
    )
    pending_challenges = pending_resp.json()
    if pending_challenges:
        current_challenge = pending_challenges[0]
        expires_at_str = current_challenge.get("expires_at")
        if expires_at_str:
            expires_at = datetime.fromisoformat(expires_at_str.replace('Z', '+00:00'))
            if expires_at < datetime.now(timezone.utc):
                await supabase.patch(
                    "/user_challenges",
                    params={"id": f"eq.{current_challenge['id']}"},
                    json={"status": "expired"}
                )
            else:
                return current_challenge

    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
    user_resp = await supabase.get(
        "/users",
        params={"telegram_id": f"eq.{telegram_id}", "select": "*", "limit": 1}
    )
    user_resp.raise_for_status()
    user_stats = user_resp.json()[0] if user_resp.json() else {}

    user_has_twitch = user_stats.get("twitch_id") is not None
    completed_resp = await supabase.get(
        "/user_challenges",
        params={"user_id": f"eq.{telegram_id}", "status": "in.(claimed,expired)", "select": "challenge_id"}
    )
    completed_ids = {c['challenge_id'] for c in completed_resp.json()}
    
    available_resp = await supabase.get(
        "/challenges",
        params={"is_active": "eq.true", "select": "id,condition_type"}
    )
    all_available = [c for c in available_resp.json() if c['id'] not in completed_ids]

    if not user_has_twitch:
        final_available = [c for c in all_available if c.get("condition_type") != 'twitch_points']
    else:
        final_available = all_available

    if not final_available:
        return JSONResponse(status_code=404, content={"message": "–î–ª—è –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π."})

    # 3. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏
    chosen_challenge_id = random.choice(final_available)['id']
    details_resp = await supabase.get("/challenges", params={"id": f"eq.{chosen_challenge_id}", "select": "*"})
    challenge_details = details_resp.json()[0]

    duration = challenge_details['duration_days']
    expires_at = (datetime.now(timezone.utc) + timedelta(days=duration)).isoformat()
    
    # üî• –ù–û–í–û–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º start_value –ø—Ä—è–º–æ –≤ FastAPI
    condition_type = challenge_details['condition_type']
    start_value = user_stats.get(CONDITION_TO_COLUMN.get(condition_type), 0)

    # 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
    payload = {
        "user_id": telegram_id,
        "challenge_id": chosen_challenge_id,
        "status": "pending",
        "assigned_at": datetime.now(timezone.utc).isoformat(), # –î–æ–±–∞–≤–ª–µ–Ω–æ: –¥–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        "expires_at": expires_at,
        "progress_value": 0,
        "start_value": start_value,
        "baseline_value": 0
    }
    
    # üî• –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {payload}")

    try:
        new_user_challenge_resp = await supabase.post(
            "/user_challenges",
            json=payload,
            headers={"Prefer": "return=representation"}
        )
        # üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
        new_user_challenge_resp.raise_for_status()
        
        new_user_challenge = new_user_challenge_resp.json()[0]
        new_user_challenge['challenges'] = challenge_details

        return new_user_challenge

    except httpx.HTTPStatusError as e:
        # –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤ Supabase: {e.response.text}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")

    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
    user_resp = await supabase.post("/rpc/get_user_profile_and_stats", json={"p_telegram_id": telegram_id})
    user_resp.raise_for_status()
    user_stats = user_resp.json()[0] if user_resp.json() else {}

    user_has_twitch = user_stats.get("twitch_id") is not None
    completed_resp = await supabase.get(
        "/user_challenges",
        params={"user_id": f"eq.{telegram_id}", "status": "in.(claimed,expired)", "select": "challenge_id"}
    )
    completed_ids = {c['challenge_id'] for c in completed_resp.json()}
    
    available_resp = await supabase.get(
        "/challenges",
        params={"is_active": "eq.true", "select": "id,condition_type"}
    )
    all_available = [c for c in available_resp.json() if c['id'] not in completed_ids]

    if not user_has_twitch:
        final_available = [c for c in all_available if c.get("condition_type") != 'twitch_points']
    else:
        final_available = all_available

    if not final_available:
        return JSONResponse(status_code=404, content={"message": "–î–ª—è –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π."})

    # 3. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏
    chosen_challenge_id = random.choice(final_available)['id']
    details_resp = await supabase.get("/challenges", params={"id": f"eq.{chosen_challenge_id}", "select": "*"})
    challenge_details = details_resp.json()[0]

    duration = challenge_details['duration_days']
    expires_at = (datetime.now(timezone.utc) + timedelta(days=duration)).isoformat()
    
    # üî• –ù–û–í–û–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º start_value –ø—Ä—è–º–æ –≤ FastAPI
    condition_type = challenge_details['condition_type']
    start_value = user_stats.get(CONDITION_TO_COLUMN.get(condition_type), 0)

    # 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
    new_user_challenge_resp = await supabase.post(
        "/user_challenges",
        json={
            "user_id": telegram_id,
            "challenge_id": chosen_challenge_id,
            "status": "pending",
            "expires_at": expires_at,
            "start_value": start_value,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "progress_value": 0,         # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            "baseline_value": 0          # –û—Å—Ç–∞–≤–ª—è–µ–º, –∫–∞–∫ –±—ã–ª–æ
        },
        headers={"Prefer": "return=representation"}
    )
    new_user_challenge_resp.raise_for_status() # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É!
    new_user_challenge = new_user_challenge_resp.json()[0]
    new_user_challenge['challenges'] = challenge_details

    return new_user_challenge
    
@app.post("/api/v1/user/challenge/status")
async def get_user_challenge_status(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —á–µ–ª–ª–µ–Ω–¥–∂–∞. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—â–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π.
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    telegram_id = user_info["id"]

    # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π (pending) —á–µ–ª–ª–µ–Ω–¥–∂
    pending_resp = await supabase.get(
        "/user_challenges",
        params={
            "user_id": f"eq.{telegram_id}",
            "status": "eq.pending",
            "select": "*,challenges(*)"
        }
    )
    pending_challenges = pending_resp.json()
    if pending_challenges:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫
        current_challenge = pending_challenges[0]
        expires_at_str = current_challenge.get("expires_at")
        if expires_at_str and datetime.fromisoformat(expires_at_str.replace('Z', '+00:00')) < datetime.now(timezone.utc):
            await supabase.patch("/user_challenges", params={"id": f"eq.{current_challenge['id']}"}, json={"status": "expired"})
        else:
            return current_challenge

    # 2. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ç, –∏—â–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –∑–∞–±—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É
    completed_resp = await supabase.get(
        "/user_challenges",
        params={
            "user_id": f"eq.{telegram_id}",
            "status": "eq.completed",
            "claimed_at": "is.null", # –ö–ª—é—á–µ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ: –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
            "select": "*,challenges(*)",
            "limit": 1
        }
    )
    completed_challenges = completed_resp.json()
    if completed_challenges:
        return completed_challenges[0]
    
    # 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    return Response(status_code=204)
    
@app.post("/api/v1/user/challenge/check")
async def check_challenge_progress(
    request_data: InitDataRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    telegram_id = user_info["id"]

    try:
        await supabase.post(
            "/rpc/recalculate_single_challenge",
            json={"p_user_id": telegram_id}
        )
        return {"message": "–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω."}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ recalculate_single_challenge: {e}")
        return {"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å."}
        
# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
@app.post("/api/v1/admin/challenges")
async def get_all_challenges(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS: raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    resp = await supabase.get("/challenges", params={"select": "*", "order": "id.desc"})
    return resp.json()

@app.post("/api/v1/admin/challenges/create")
async def create_challenge(request_data: ChallengeAdminCreateRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS: raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    try:
        response = await supabase.post("/challenges", json=request_data.dict(exclude={'initData'}))
        response.raise_for_status() # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ Supabase –æ—Ç–≤–µ—Ç–∏—Ç —Å –æ—à–∏–±–∫–æ–π
    except httpx.HTTPStatusError as e:
        # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        error_details = e.response.json().get("message", str(e))
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤ Supabase: {error_details}")
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {error_details}")

    return {"message": "–ß–µ–ª–ª–µ–Ω–¥–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."}

# --- –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ---

@app.post("/api/v1/admin/categories")
async def get_categories(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–≤–µ—Å—Ç–æ–≤."""
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    resp = await supabase.get("/quest_categories", params={"select": "*", "order": "sort_order.asc"})
    resp.raise_for_status()
    return resp.json()

@app.post("/api/v1/admin/quests/reorder")
async def reorder_quests(
    request_data: QuestReorderRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    """
    –ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –¥–≤–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–≤–µ—Å—Ç–∞.
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ Python –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    quest_id = request_data.quest_id
    category_id = request_data.category_id
    direction = request_data.direction

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–≤–µ—Å—Ç—ã –≤ –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        query_params = {"select": "id,sort_order"}
        if category_id is None:
            query_params["category_id"] = "is.null"
        else:
            query_params["category_id"] = f"eq.{category_id}"
        
        quests_resp = await supabase.get("/quests", params=query_params)
        quests_resp.raise_for_status()
        quests = quests_resp.json()

        # 2. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º sort_order: –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ–≥–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
        if any(q.get('sort_order') is None for q in quests):
            quests.sort(key=lambda q: q.get('id')) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            for i, quest in enumerate(quests):
                quest['sort_order'] = i + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ sort_order
        quests.sort(key=lambda q: q.get('sort_order'))

        # 3. –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–µ—Å—Ç–∞
        current_index = -1
        for i, q in enumerate(quests):
            if q['id'] == quest_id:
                current_index = i
                break
        
        if current_index == -1:
            raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–∏–º –∫–≤–µ—Å—Ç–æ–º –º–µ–Ω—è—Ç—å—Å—è
        if direction == "up":
            if current_index == 0: return {"message": "–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ."}
            target_index = current_index - 1
        elif direction == "down":
            if current_index == len(quests) - 1: return {"message": "–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—Ç–µ."}
            target_index = current_index + 1
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")

        # 5. –ú–µ–Ω—è–µ–º –∏—Ö sort_order –º–µ—Å—Ç–∞–º–∏
        current_sort_order = quests[current_index]['sort_order']
        target_sort_order = quests[target_index]['sort_order']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await supabase.patch("/quests", params={"id": f"eq.{quests[current_index]['id']}"}, json={"sort_order": target_sort_order})
        await supabase.patch("/quests", params={"id": f"eq.{quests[target_index]['id']}"}, json={"sort_order": current_sort_order})

        return {"message": "–ü–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."}
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ.")
        
@app.post("/api/v1/admin/categories/create")
async def create_category(request_data: CategoryCreateRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–≤–µ—Å—Ç–æ–≤."""
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await supabase.post("/quest_categories", json={"name": request_data.name})
    return {"message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."}

@app.post("/api/v1/admin/categories/update")
async def update_category(request_data: CategoryUpdateRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await supabase.patch(
        "/quest_categories",
        params={"id": f"eq.{request_data.category_id}"},
        json={"name": request_data.name}
    )
    return {"message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."}

@app.post("/api/v1/admin/categories/delete")
async def delete_category(request_data: CategoryDeleteRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤."""
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    category_id_to_delete = request_data.category_id

    # 1. –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–≤–µ—Å—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    check_resp = await supabase.get(
        "/quests",
        params={"category_id": f"eq.{category_id_to_delete}", "select": "id", "limit": 1}
    )
    check_resp.raise_for_status()
    
    if check_resp.json():
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç, –Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–≤–µ—Å—Ç
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏—Ö.")

    # 2. –ï—Å–ª–∏ –∫–≤–µ—Å—Ç–æ–≤ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await supabase.delete(
        "/quest_categories",
        params={"id": f"eq.{category_id_to_delete}"}
    )
    
    return {"message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."}

@app.post("/api/v1/admin/challenges/delete")
async def delete_challenge(request_data: ChallengeAdminDeleteRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS: raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    challenge_id = request_data.challenge_id
    await supabase.delete("/user_challenges", params={"challenge_id": f"eq.{challenge_id}"})
    await supabase.delete("/challenges", params={"id": f"eq.{challenge_id}"})
    return {"message": "–ß–µ–ª–ª–µ–Ω–¥–∂ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."}

@app.post("/api/v1/admin/quests/all")
async def get_all_quests(request_data: InitDataRequest, supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∫–≤–µ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    resp = await supabase.get("/quests", params={"select": "*", "order": "id.desc"})
    resp.raise_for_status()
    return resp.json()
# --- Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≤–µ–Ω—Ç–æ–≤ ---
class EventItem(BaseModel):
    id: int
    title: str
    image_url: str
    tickets_cost: int

class EventsPageContent(BaseModel):
    mainTitle: str
    raffleEndTime: Optional[str] = None # <-- –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
    infoBlock1Title: str
    infoBlock1Desc: str
    infoBlock2Title: str
    infoBlock2Desc: str
    infoBlock3Title: str
    infoBlock3Desc: str
    events: List[EventItem]

class EventsPageUpdateRequest(BaseModel):
    initData: str
    content: EventsPageContent

# --- API –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≤–µ–Ω—Ç–æ–≤ ---

@app.post("/api/v1/events/participants")
async def get_event_participants(
    request_data: EventParticipantsRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞, –æ–±—ä–µ–¥–∏–Ω—è—è —Å—Ç–∞–≤–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
        resp = await supabase.get(
            "/event_entries",
            params={
                "event_id": f"eq.{request_data.event_id}",
                "select": "tickets_spent, user:users(full_name, username)"
            }
        )
        resp.raise_for_status()
        all_entries = resp.json()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        aggregated_participants = {}
        for entry in all_entries:
            user_data = entry.get("user", {})
            full_name = user_data.get("full_name") or user_data.get("username", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            tickets_spent = entry.get("tickets_spent", 0)

            if full_name not in aggregated_participants:
                aggregated_participants[full_name] = {
                    "full_name": full_name,
                    "username": user_data.get("username"),
                    "tickets_spent": 0
                }
            aggregated_participants[full_name]["tickets_spent"] += tickets_spent

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        sorted_participants = sorted(
            list(aggregated_participants.values()),
            key=lambda x: x["tickets_spent"],
            reverse=True
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5
        return {"participants": sorted_participants[:5]}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≤–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
@app.get("/api/v1/events/content")
async def get_events_page_content(supabase: httpx.AsyncClient = Depends(get_supabase_client)):
    """
    –û—Ç–¥–∞–µ—Ç JSON —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≤–µ–Ω—Ç–æ–≤, –∑–∞–ø—Ä–µ—â–∞—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    try:
        resp = await supabase.get(
            "/pages_content",
            params={"page_name": "eq.events", "select": "content", "limit": 1}
        )
        resp.raise_for_status()
        data = resp.json()
        if not data:
            raise HTTPException(status_code=404, detail="–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≤–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∞
        headers = {
            "Cache-Control": "no-cache, no-store, must-revalidate",
            "Pragma": "no-cache",
            "Expires": "0",
        }
        return JSONResponse(content=data[0]['content'], headers=headers)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≤–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

@app.post("/api/v1/events/enter")
async def enter_event(
    request_data: EventEnterRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≤–µ–Ω—Ç, —Å–ø–∏—Å—ã–≤–∞–µ—Ç –±–∏–ª–µ—Ç—ã.
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

    telegram_id = user_info["id"]

    # 1. –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≤–µ–Ω—Ç–∞
    event_resp = await supabase.get(
        "/pages_content",
        params={"page_name": "eq.events", "select": "content"}
    )
    event_data = event_resp.json()[0]['content']['events']
    event_min_tickets = next((e['tickets_cost'] for e in event_data if e['id'] == request_data.event_id), 1)

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
    if request_data.tickets_to_spend < event_min_tickets:
        raise HTTPException(
            status_code=400,
            detail=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ - {event_min_tickets} –±–∏–ª–µ—Ç–æ–≤."
        )

    # 3. –í—ã–∑—ã–≤–∞–µ–º RPC-—Ñ—É–Ω–∫—Ü–∏—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        response = await supabase.post(
            "/rpc/enter_event",
            json={
                "p_user_id": telegram_id,
                "p_event_id": request_data.event_id,
                "p_tickets_to_spend": request_data.tickets_to_spend
            }
        )
        response.raise_for_status()

        new_balance = response.json()
        return {
            "message": "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≤–µ–Ω—Ç–µ!",
            "new_ticket_balance": new_balance
        }

    except httpx.HTTPStatusError as e:
        error_details = e.response.json().get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        raise HTTPException(status_code=400, detail=error_details)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∏–≤–µ–Ω—Ç: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")

@app.post("/api/v1/admin/events/update")
async def update_events_page_content(
    request_data: EventsPageUpdateRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≤–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

    try:
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º PATCH –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
        await supabase.patch(
            "/pages_content",
            params={"page_name": "eq.events"}, # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É
            json={"content": request_data.content.dict()} # –ò –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ content
        )
        return {"message": "–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≤–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        
@app.post("/api/v1/user/trade_link/save")
async def save_trade_link(
    request_data: TradeLinkUpdateRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or "id" not in user_info:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    telegram_id = user_info["id"]
    
    await supabase.patch(
        "/users",
        params={"telegram_id": f"eq.{telegram_id}"},
        json={"trade_link": request_data.trade_link}
    )
    
    return {"message": "–¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"}

@app.post("/api/v1/admin/events/winners")
async def get_event_winners_for_admin(
    request_data: InitDataRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        
    content_resp = await supabase.get("/pages_content", params={"page_name": "eq.events", "select": "content", "limit": 1})
    content_resp.raise_for_status()
    content_data = content_resp.json()
    if not content_data:
        return []
    
    events = content_data[0].get("content", {}).get("events", [])
    winners_info = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
    winner_ids = [event['winner_id'] for event in events if 'winner_id' in event]
    if not winner_ids:
        return []

    users_resp = await supabase.get("users", params={"telegram_id": f"in.({','.join(map(str, winner_ids))})", "select": "telegram_id,trade_link"})
    users_data = {user['telegram_id']: user.get('trade_link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') for user in users_resp.json()}

    for event in events:
        if "winner_id" in event and "winner_name" in event:
            winners_info.append({
                "winner_name": event["winner_name"],
                "prize_title": event["title"],
                "prize_description": event.get("description", ""),
                "trade_link": users_data.get(event["winner_id"], "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            })
            
    return winners_info

@app.post("/api/v1/admin/events/clear_participants")
async def clear_event_participants(
    request_data: EventClearRequest,
    supabase: httpx.AsyncClient = Depends(get_supabase_client)
):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∑–∞–ø–∏—Å–∏) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞.
    """
    user_info = is_valid_init_data(request_data.initData, ALL_VALID_TOKENS)
    if not user_info or user_info.get("id") not in ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

    try:
        await supabase.delete(
            "/event_entries",
            params={"event_id": f"eq.{request_data.event_id}"}
        )
        return {"message": f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è –∏–≤–µ–Ω—Ç–∞ {request_data.event_id} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≤–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        
# --- HTML routes ---
@app.get('/favicon.ico', include_in_schema=False)
async def favicon(): return Response(status_code=204)
@app.get("/menu")
async def menu_page(request: Request): return FileResponse(f"{TEMPLATES_DIR}/menu.html")
@app.get("/leaderboard")
async def leaderboard_page(request: Request): return FileResponse(f"{TEMPLATES_DIR}/leaderboard.html")
@app.get("/profile")
async def profile_page(request: Request): return FileResponse(f"{TEMPLATES_DIR}/profile.html")
@app.get("/admin")
async def admin_page(request: Request): return FileResponse(f"{TEMPLATES_DIR}/admin.html")
@app.get("/events")
async def events_page(request: Request): return FileResponse(f"{TEMPLATES_DIR}/events.html")
@app.get("/")
async def read_root(): return FileResponse(f"{TEMPLATES_DIR}/index.html")

def fill_missing_quest_data(quests: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    –î–æ–ø–æ–ª–Ω—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    Args:
        quests: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–≤–µ—Å—Ç–æ–≤.

    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    default_values = {
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        "icon_url": "https://hatelavka-quest-lilac.vercel.app/default_icon.png",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π –∏–∫–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "action_url": None,
        "category_id": None,
        "is_repeatable": False,
        "end_date": None,
        "target_value": 0,
        "reward_amount": 0
    }

    updated_quests = []
    for quest in quests:
        updated_quest = {**default_values, **quest}
        updated_quests.append(updated_quest)
        
    return updated_quests

def fill_missing_challenge_data(challenges: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    –î–æ–ø–æ–ª–Ω—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    Args:
        challenges: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.

    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    default_values = {
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        "condition_type": "telegram_messages",
        "target_value": 0,
        "duration_days": 7,
        "reward_amount": 0
    }

    updated_challenges = []
    for challenge in challenges:
        updated_challenge = {**default_values, **challenge}
        updated_challenges.append(updated_challenge)
    
    return updated_challenges
